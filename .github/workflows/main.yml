name: CI/CD Pipeline

on: 
  push:
    branches:
      -  main
  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create Build Directory and Zip File
        run: |
          pwd
          mkdir build-1.0.0
          rsync -av ./ ./build-1.0.0 --exclude build-1.0.0
          zip -r build-1.0.0.zip build-1.0.0
          ls -l

      - name: Upload Build Artifact to Nexus
        run: |
           curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
           --upload-file build-1.0.0.zip \
           ${{ secrets.NEXUS_URL }}/com/example/build/1.0.0/build-1.0.0.zip
           
  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      -  name: checkout-code
         uses: actions/checkout@v3
      
      - name: Install CommandBox
        run: |
            curl -fsSl https://downloads.ortussolutions.com/debs/gpg | sudo apt-key add -
            echo "deb http://downloads.ortussolutions.com/debs/noarch /" | sudo tee -a /etc/apt/sources.list.d/commandbox.list
            sudo apt-get update && sudo apt-get install commandbox

      - name: Start ColdFusion Server for Testing
        run: |
          box server start cfengine=lucee@5 --no-config

      - name: Run Tests
        run: |
          box testbox run directory=tests.specs recurse=true reporter=json verbose=true

  Sonarcloud-analysis:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      -  name: checkout-code
         uses: actions/checkout@v3
    
      - name: Set up JDK 17  # SonarCloud-ku Java runtime thevai
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install SonarScanner
        run: npm install sonar-scanner

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./node_modules/.bin/sonar-scanner \
            -Dsonar.projectKey=CF_DevOps_Project \
            -Dsonar.organization=ilayarajac515 \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN

  Trivy-scan:  # New reusable job
    runs-on: ubuntu-latest
    needs: Build
    steps:
      -  name: checkout-code
         uses: actions/checkout@v3
     
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          echo "::set-output name=success::true"

      - name: Run Trivy Scan
        run: trivy fs . > trivy_scan_output.txt
      
      - name: Upload Trivy Scan Output
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results
          path: trivy_scan_output.txt
  Docker:
    runs-on: ubuntu-latest
    needs: [Test, Trivy-scan, Sonarcloud-analysis]
    steps:
      -  name: checkout-code
         uses: actions/checkout@v3

      - name: Download Build Artifact from Nexus
        run: |
           curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
           -O ${{ secrets.NEXUS_URL }}/com/example/build/1.0.0/build-1.0.0.zip
         
      -  name: build docker image
         run:  |
            docker build -t cold_fusion_app:latest /home/runner/work/CF_DevOps_Project/CF_DevOps_Project
  
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          echo "::set-output name=success::true"

      - name: Scan Docker Image with Trivy
        run: trivy image --no-progress --severity HIGH,CRITICAL cold_fusion_app:latest > trivy_docker_scan_output.txt

      - name: Upload Trivy Scan Output
        uses: actions/upload-artifact@v3
        with:
          name: trivy-docker-scan-results
          path: trivy_docker_scan_output.txt

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker tag cold_fusion_app:latest ${{ secrets.DOCKER_USERNAME }}/cold_fusion_app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cold_fusion_app:latest

  # Deploy:
  #   runs-on: ubuntu-latest
  #   needs: Docker
  #   steps: 
  #     -  name: checkout-code
  #        uses: actions/checkout@v3
    
  #     - name: Set up kubeconfig
  #       run: |
  #         mkdir -p $HOME/.kube
  #         echo "${{ secrets.KUBECONFIG_CONTENT }}" > $HOME/.kube/config

  #     - name: Install kubectl
  #       run: |
  #         curl -LO "https://dl.k8s.io/release/v1.27.0/bin/linux/amd64/kubectl"
  #         chmod +x kubectl
  #         sudo mv kubectl /usr/local/bin/kubectl

  #     - name: Apply Kubernetes Manifests
  #       run: |
  #         kubectl apply -f deployment.yaml
  #         kubectl apply -f service.yaml

  #     - name: Verify Deployment
  #       run: |
  #         kubectl get pods
  #         kubectl get svc
